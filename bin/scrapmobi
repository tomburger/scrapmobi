#!/usr/bin/env ruby
require 'scrapmobi'  
require 'mail'

$DEBUG = true

include GLI::App

program_desc 'Scrapmobi prepares your weekly torah reading in ePUB and MOBI formats'

version Scrapmobi::VERSION

desc 'If on, there is no information outputted on STDERR, only error messages'
switch [:silent]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

pre do |global,command,options,args|
  ScrapData.prepare

  # if no arguments, let's default to the complete content of config file
  if args.empty?
    ScrapData.config.keys.each { |k| args << k }
  end
  
  true
end

command :pages do |c|
  c.action do |global,options,args|
    Pages.print()
  end
end

command :parasha do |c|
  c.action do |global,options,args|
    parasha = HebCal.current_parasha(Date.today)
    puts parasha
    torah = HebCal.torah_portion(parasha)
    puts torah
  end
end

command :download do |c|
  c.action do |global,options,args|
    Download.download(args) do |page, content|
      puts '-----------'
      puts 'Now downloading ' + page + '...'
      puts '-----------'
      puts content
    end
  end
end

command :scrap do |c|
  c.action do |global,options,args|
    Scrapper.run(args)
  end
end

command :package do |c|
  c.action do |global,options,args|
    Ebook.as_epub(args)
  end
end

command :epub do |c|
  c.action do |global,options,args|
    Scrapper.run(args)
    Ebook.as_epub(args)
  end
end

command :mobi do |c|
  c.action do |global,options,args|
    Scrapper.run(args)
    Ebook.as_epub(args)
    Ebook.to_mobi
  end
end

command :email do |c|
  c.action do |global,options,args|
    mail = Mail.new do 
      from    'tomas@burger.cz'
      to      'tomas_touch@free.kindle.com'
      subject 'New ScrapMobi'
      body    'Weekly reading delivered to your mailbox'
    end
    mail.add_file './ebook/scrapmobi.mobi'
    mail.deliver!
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
